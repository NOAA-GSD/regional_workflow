{#

This is a Jinja-enabled Rocoto XML template. It is filled in using the
fill_template.py script, and is done automatically by the
generate_workflow.sh step of preparing a regional workflow configured
experiment.

See README.xml_templating.md for information on using the Templating mechanisms.
-#}
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE workflow [

<!--
Parameters needed by the job scheduler.
-->
<!ENTITY ACCOUNT       "{{ account }}">
<!ENTITY ACCOUNT_RES   "{{ account_res }}">
<!ENTITY SCHED         "{{ sched }}">
<!ENTITY QUEUE_DEFAULT "{{ queue_default }}">
<!ENTITY QUEUE_HPSS    "{{ queue_hpss }}">
<!ENTITY QUEUE_FCST    "{{ queue_fcst }}">

<!--
Workflow task names.
-->
<!ENTITY MAKE_GRID_TN      "{{ make_grid_tn }}">
<!ENTITY MAKE_OROG_TN      "{{ make_orog_tn }}">
<!ENTITY MAKE_SFC_CLIMO_TN "{{ make_sfc_climo_tn }}">
<!ENTITY GET_EXTRN_ICS_TN  "{{ get_extrn_ics_tn }}">
<!ENTITY GET_EXTRN_LBCS_TN "{{ get_extrn_lbcs_tn }}">
<!ENTITY MAKE_ICS_TN       "{{ make_ics_tn }}">
<!ENTITY MAKE_LBCS_TN      "{{ make_lbcs_tn }}">
<!ENTITY RUN_FCST_TN       "{{ run_fcst_tn }}">
<!ENTITY RUN_FCST_LONG_TN  "{{ run_fcst_long_tn }}">
<!ENTITY RUN_POST_TN       "{{ run_post_tn }}">

<!ENTITY ANAL_GSI_INPUT_TN    "{{ anal_gsi_input }}">
<!ENTITY ANAL_GSI_RESTART_TN  "{{ anal_gsi_restart }}">

<!ENTITY RUN_BUFR_TN       "run_bufr">
<!ENTITY RUN_NCL_TN        "run_ncl">
<!ENTITY RUN_NCL_ZIP_TN    "run_ncl_zip">
<!ENTITY CLEAN_TN          "run_clean">
<!ENTITY ARCHIVE_TN        "run_archive">
<!ENTITY RUN_ANAL_TN       "run_anal_gsi">

<!--
Settings for NCL/PYTHON plotting
-->
<!ENTITY NCL_WORKDIR_ROOT "{{ ncl_workdir_root }}">
<!ENTITY NCL_ROOT "/whome/wrfruc/bin/ncl/nclrrfs">
<!ENTITY NCL_SCRIPTS "/home/wrfruc/HRRRE/bin">
<!ENTITY NCL_MAIN_PROC "8">
<!ENTITY NCL_PROC "1">
<!ENTITY NCL_MAIN_RESOURCES "<walltime>01:15:00</walltime>">
<!ENTITY PYTHON_SCRIPTS "/mnt/lfs4/BMC/wrfruc/RRFSE/python_graphics">

<!--
Flags that specify whether to run the preprocessing tasks.
-->
<!ENTITY RUN_TASK_MAKE_GRID      "{{ run_task_make_grid | upper }}">
<!ENTITY RUN_TASK_MAKE_OROG      "{{ run_task_make_orog | upper }}">
<!ENTITY RUN_TASK_MAKE_SFC_CLIMO "{{ run_task_make_sfc_climo | upper }}">

<!--
Number of physical cores per node for the current machine.  This is used
below in the <nodesize> tag, but that tag is not clearly documented.  This
parameter may be unnecessary since each task now has its own variable that
specifies the number of processes per node being used (the PPN_... entities).
-->
<!ENTITY NCORES_PER_NODE "{{ ncores_per_node }}">

<!--
Directories and files.
-->
<!ENTITY JOBSDIR                  "{{ jobsdir }}">
<!ENTITY LOGDIR                   "{{ logdir }}">
<!ENTITY CYCLE_BASEDIR            "{{ cycle_basedir }}">
<!ENTITY COMOUT_BASEDIR           "{{ comout_basedir }}">
<!ENTITY OBSPATH                  "{{ obspath }}">
<!ENTITY GLOBAL_VAR_DEFNS_FP      "{{ global_var_defns_fp }}">
<!ENTITY LOAD_MODULES_RUN_TASK_FP "{{ load_modules_run_task_fp }}">

<!--
Reservation types.  Reservations specify the queue/partition and account
to use for a given task.  The "DEFAULT" reservation type is used for all 
tasks other than GET_EXTRN_ICS_TN, GET_EXTRN_LBCS_TN, and RUN_FCST_TN; 
the "HPSS" type is used for the GET_EXTRN_ICS_TN and GET_EXTRN_LBCS_TN 
tasks; and the "FCST" type is used for the RUN_FCST_TN task.
-->

{%- if partition_default is not none %}
<!ENTITY RSRV_DEFAULT "<account>&ACCOUNT;</account><queue>&QUEUE_DEFAULT;</queue><partition>{{ partition_default }}</partition>">
{%- else %}
<!ENTITY RSRV_DEFAULT "<account>&ACCOUNT;</account><queue>&QUEUE_DEFAULT;</queue>">
{%- endif %}
{%- if partition_hpss is not none %}
<!ENTITY RSRV_HPSS    "<account>&ACCOUNT;</account><queue>&QUEUE_HPSS;</queue><partition>{{ partition_hpss }}</partition>">
{%- else %}
<!ENTITY RSRV_HPSS    "<account>&ACCOUNT;</account><queue>&QUEUE_HPSS;</queue>">
{%- endif %}
{%- if partition_fcst is not none %}
{%- if run_realtime %} 
<!ENTITY RSRV_FCST    "<account>&ACCOUNT_RES;</account><queue>&QUEUE_FCST;</queue><partition>{{ partition_fcst }}</partition>">
{%- else %}
<!ENTITY RSRV_FCST    "<account>&ACCOUNT;</account><queue>&QUEUE_FCST;</queue><partition>{{ partition_fcst }}</partition>">
{%- endif %}
{%- else %}
<!ENTITY RSRV_FCST    "<account>&ACCOUNT;</account><queue>&QUEUE_FCST;</queue>">
{%- endif %}

{%- if run_realtime %}
<!ENTITY DEADLINE_PRE      "08:00:00">
<!ENTITY DEADLINE_FCST     "23:30:00">
<!ENTITY DEADLINE_FCST_00Z "12:30:00">
<!ENTITY DEADLINE_FCST_12Z "14:15:00">
<!ENTITY START_FCST_12Z    "06:00:00">
<!ENTITY DEADLINE_POST     "24:00:00">
<!ENTITY DEADLINE_GRAPHICS "24:00:00">
<!ENTITY DEADLINE_ANAL     "42:00:00">

<!ENTITY WALL_LIMIT_PRE '<deadline><cyclestr offset="&DEADLINE_PRE;">@Y@m@d@H@M</cyclestr></deadline>'>
<!ENTITY WALL_LIMIT_FCST '<deadline><cyclestr offset="&DEADLINE_FCST;">@Y@m@d@H@M</cyclestr></deadline>'>
<!ENTITY WALL_LIMIT_FCST_00Z '<deadline><cyclestr offset="&DEADLINE_FCST_00Z;">@Y@m@d@H@M</cyclestr></deadline>'>
<!ENTITY WALL_LIMIT_FCST_12Z '<deadline><cyclestr offset="&DEADLINE_FCST_12Z;">@Y@m@d@H@M</cyclestr></deadline>'>
<!ENTITY WALL_LIMIT_POST '<deadline><cyclestr offset="&DEADLINE_POST;">@Y@m@d@H@M</cyclestr></deadline>'>
<!ENTITY WALL_LIMIT_BUFR '<deadline><cyclestr offset="&DEADLINE_POST;">@Y@m@d@H@M</cyclestr></deadline>'>
<!ENTITY WALL_LIMIT_GRAPHICS '<deadline><cyclestr offset="&DEADLINE_GRAPHICS;">@Y@m@d@H@M</cyclestr></deadline>'>
<!ENTITY WALL_LIMIT_ANAL '<deadline><cyclestr offset="&DEADLINE_ANAL;">@Y@m@d@H@M</cyclestr></deadline>'>
{%- endif %}


]>

{%- if run_realtime %}
<workflow realtime="T" scheduler="&SCHED;" cyclethrottle="15" cyclelifespan="02:00:00:00">
{%- else %}
<workflow realtime="F" scheduler="&SCHED;" cyclethrottle="15" >
{%- endif %}
{# Double quotes are required inside the strftime! Expect an error from reading the template if using single quotes. #}
  <cycledef group="at_start">{{ cdate_first_cycl.strftime("%M %H %d %m %Y *") }}</cycledef>
  <cycledef group="forecast_00z">{{ cdate_first_cycl.strftime("%Y%m%d") }}0000 {{ cdate_last_cycl.strftime("%Y%m%d") }}0000 24:00:00 </cycledef>
  <cycledef group="forecast_12z">{{ cdate_first_cycl.strftime("%Y%m%d") }}1200 {{ cdate_last_cycl.strftime("%Y%m%d") }}1200 24:00:00 </cycledef>
  <cycledef group="archive">{{ cdate_first_arch.strftime("%Y%m%d%H%M") }} {{ cdate_last_arch.strftime("%Y%m%d%H%M") }} 24:00:00</cycledef> 

  <log>
    <cyclestr>&LOGDIR;/FV3LAM_wflow.log</cyclestr>
  </log>

<!-- 
The following command works to call the J-job for a given task (in this
case the MAKE_GRID_TN task) if in the script LOAD_MODULES_RUN_TASK_FP we 
do NOT call exec to run the J-job.  The command first sources the script
LOAD_MODULES_RUN_TASK_FP and then runs the J-job, so it is simpler than
calling exec and thus preferred if NCO accepts it.  Note that the portion
of the command that sources LOAD_MODULES_RUN_TASK_FP also passes an 
argument to it (the argument being the name of the task).  This works in
bash but it probably won't work in sh.

If this method is acceptable to NCO, then for clarity maybe we can
source LOAD_MODULES_RUN_TASK_FP within the J-job instead of here since
we are already sourcing other files in the J-job anyway.
-->
<!--
    <command>{ . &LOAD_MODULES_RUN_TASK_FP; "&MAKE_GRID_TN;";
               &JOBSDIR;/JREGIONAL_MAKE_GRID;
             }</command>
-->
<!--
The following command works if we call exec in LOAD_MODULES_RUN_TASK_FP
to run the J-job.  This passes the J-job script as the second argument
to LOAD_MODULES_RUN_TASK_FP (the first argument is the task name).  The
J-job then uses exec to run the J-job (while also terminating the LOAD_-
MODULES_RUN_TASK_FP script.
-->

{% if run_task_make_grid %}
<!--
************************************************************************
************************************************************************
-->
  <task name="&MAKE_GRID_TN;" cycledefs="at_start" maxtries="{{ maxtries_make_grid }}">

    &RSRV_DEFAULT;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&MAKE_GRID_TN;" "&JOBSDIR;/JREGIONAL_MAKE_GRID"</command>
  {% if machine in ["WCOSS_DELL_P3", "WCOSS_CRAY"]  %}
    <nodes>{{ nnodes_make_grid }}:ppn=1</nodes>
  {% else %}
    <nodes>{{ nnodes_make_grid }}:ppn={{ ppn_make_grid }}</nodes>
  {% endif %}
    <walltime>{{ wtime_make_grid }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
    <jobname>&MAKE_GRID_TN;</jobname>
    <join><cyclestr>&LOGDIR;/&MAKE_GRID_TN;.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>

  </task>
{% endif %}

{% if run_task_make_orog %}
<!--
************************************************************************
************************************************************************
-->
  <task name="&MAKE_OROG_TN;" cycledefs="at_start" maxtries="{{ maxtries_make_orog }}">

    &RSRV_DEFAULT;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&MAKE_OROG_TN;" "&JOBSDIR;/JREGIONAL_MAKE_OROG"</command>
  {% if machine in ["WCOSS_DELL_P3", "WCOSS_CRAY"]  %}
    <nodes>{{ nnodes_make_orog }}:ppn=1</nodes>
  {% else %}
    <nodes>{{ nnodes_make_orog }}:ppn={{ ppn_make_orog }}</nodes>
  {% endif %}
    <walltime>{{ wtime_make_orog }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
    <jobname>&MAKE_OROG_TN;</jobname>
    <join><cyclestr>&LOGDIR;/&MAKE_OROG_TN;.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>

    <dependency>
      <or>
<!--        <taskdep task="make_grid"/> -->
        <datadep age="00:00:00:05">&LOGDIR;/&MAKE_GRID_TN;_task_complete.txt</datadep>
        <streq><left>&RUN_TASK_MAKE_GRID;</left><right>FALSE</right></streq>
      </or>
    </dependency>

  </task>
{% endif %}

{% if run_task_make_sfc_climo %}
<!--
************************************************************************
************************************************************************
-->
  <task name="&MAKE_SFC_CLIMO_TN;" cycledefs="at_start" maxtries="{{ maxtries_make_sfc_climo }}">

    &RSRV_DEFAULT;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&MAKE_SFC_CLIMO_TN;" "&JOBSDIR;/JREGIONAL_MAKE_SFC_CLIMO"</command>
    <nodes>{{ nnodes_make_sfc_climo }}:ppn={{ ppn_make_sfc_climo }}</nodes>
    <walltime>{{ wtime_make_sfc_climo }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
    <jobname>&MAKE_SFC_CLIMO_TN;</jobname>
    <join><cyclestr>&LOGDIR;/&MAKE_SFC_CLIMO_TN;.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>

    <dependency>
      <and>
        <or>
<!--          <taskdep task="&MAKE_GRID_TN;"/> -->
          <datadep age="00:00:00:05">&LOGDIR;/&MAKE_GRID_TN;_task_complete.txt</datadep>
          <streq><left>&RUN_TASK_MAKE_GRID;</left><right>FALSE</right></streq>
        </or>
        <or>
<!--          <taskdep task="&MAKE_OROG_TN;"/> -->
          <datadep age="00:00:00:05">&LOGDIR;/&MAKE_OROG_TN;_task_complete.txt</datadep>
          <streq><left>&RUN_TASK_MAKE_OROG;</left><right>FALSE</right></streq>
        </or>
      </and>
    </dependency>

  </task>
{% endif %}

<!--
************************************************************************
************************************************************************
-->
{%- if run_control %}
<!--*****************************************************************-->
{%- if do_ensemble %}
  <metatask name="run_ensemble">

    <var name="{{ ensmem_indx_name }}">
{%- for m in range(1, 2) -%}
  {%- set fmtstr=" %0"~ndigits_ensmem_names~"d" -%}
  {{- fmtstr%m -}}
{%- endfor %} </var>
{%- endif %}

  <task name="&GET_EXTRN_ICS_TN;{{ uscore_ensmem_name }}" cycledefs="forecast_00z,forecast_12z" maxtries="{{ maxtries_get_extrn_ics }}">

    &RSRV_HPSS;
  {% if run_realtime %}
    &WALL_LIMIT_PRE;
  {% endif %}
  {% if machine in ["WCOSS_CRAY"] %}
    <shared/>
  {% endif %}
    <command>&LOAD_MODULES_RUN_TASK_FP; "&GET_EXTRN_ICS_TN;" "&JOBSDIR;/JREGIONAL_GET_EXTRN_MDL_FILES"</command>
  {% if machine in ["WCOSS_DELL_P3"] %}
    <memory>2048M</memory><native>-R affinity[core]</native>
  {% endif %}
    <nodes>{{ nnodes_get_extrn_ics }}:ppn={{ ppn_get_extrn_ics }}</nodes>
    <walltime>{{ wtime_get_extrn_ics }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
    <jobname>rrfse_&GET_EXTRN_ICS_TN;{{ uscore_ensmem_name }}</jobname>
    <join><cyclestr>&LOGDIR;/&GET_EXTRN_ICS_TN;{{ uscore_ensmem_name }}_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>EXTRN_MDL_NAME</name><value>{{ extrn_mdl_name_ics }}</value></envar>
    <envar><name>ICS_OR_LBCS</name><value>ICS</value></envar>
    <envar><name>SLASH_ENSMEM_SUBDIR</name><value><cyclestr>{{ slash_ensmem_subdir }}</cyclestr></value></envar>
    <envar><name>INPUT_ENSMEM_SUBDIR</name><value><cyclestr>{{ input_ensmem_subdir_00 }}</cyclestr></value></envar>
    <envar><name>POST_ENSMEM_SUBDIR</name><value><cyclestr>{{ post_ensmem_subdir_00 }}</cyclestr></value></envar>
    <envar><name>ENSMEM_NAME</name><value><cyclestr>{{ ensmem_name_00 }}</cyclestr></value></envar>

    <dependency>
<!--
      <datadep age="00:00:05:00"><cyclestr offset="-{{ extrn_mdl_ics_offset_hrs }}:00:00">{{ extrn_mdl_sysbasedir_ics }}{{ input_ensmem_subdir }}/@y@j@H00000{{ extrn_mdl_ics_offset_hrs }}</cyclestr></datadep>
-->
      <datadep age="00:00:05:00"><cyclestr offset="-{{ extrn_mdl_ics_offset_hrs }}:00:00">{{ extrn_mdl_sysbasedir_ics }}/@Y@m@d@H{{ post_ensmem_subdir_00 }}/wrfnat{{ ensmem_name_00 }}_00.grib2</cyclestr></datadep>
    </dependency>

  </task>
<!--
************************************************************************
************************************************************************
-->
  <task name="&GET_EXTRN_LBCS_TN;{{ uscore_ensmem_name }}" cycledefs="forecast_00z,forecast_12z" maxtries="{{ maxtries_get_extrn_lbcs }}">

    &RSRV_HPSS;
  {% if run_realtime %}
    &WALL_LIMIT_PRE;
  {% endif %}
  {% if machine in ["WCOSS_CRAY"] %}
    <shared/>
  {% endif %}
    <command>&LOAD_MODULES_RUN_TASK_FP; "&GET_EXTRN_LBCS_TN;" "&JOBSDIR;/JREGIONAL_GET_EXTRN_MDL_FILES"</command>
  {% if machine in ["WCOSS_DELL_P3"] %}
    <memory>2048M</memory><native>-R affinity[core]</native>
  {% endif %}
    <nodes>{{ nnodes_get_extrn_lbcs }}:ppn={{ ppn_get_extrn_lbcs }}</nodes>
    <walltime>{{ wtime_get_extrn_lbcs }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
    <jobname>rrfse_&GET_EXTRN_LBCS_TN;{{ uscore_ensmem_name }}</jobname>
    <join><cyclestr>&LOGDIR;/&GET_EXTRN_LBCS_TN;{{ uscore_ensmem_name }}_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>EXTRN_MDL_NAME</name><value>{{ extrn_mdl_name_lbcs }}</value></envar>
    <envar><name>ICS_OR_LBCS</name><value>LBCS</value></envar>
    <envar><name>SLASH_ENSMEM_SUBDIR</name><value><cyclestr>{{ slash_ensmem_subdir }}</cyclestr></value></envar>
    <envar><name>INPUT_ENSMEM_SUBDIR</name><value><cyclestr>{{ input_ensmem_subdir_00 }}</cyclestr></value></envar>
    <envar><name>POST_ENSMEM_SUBDIR</name><value><cyclestr>{{ post_ensmem_subdir_00 }}</cyclestr></value></envar>
    <envar><name>ENSMEM_NAME</name><value><cyclestr>{{ ensmem_name_00 }}</cyclestr></value></envar>

    <dependency>
      <!-- Files through fhr 66 exist. -->
      <sh>
        test $(find <cyclestr offset="-{{ extrn_mdl_lbcs_offset_hrs }}:00:00">{{ extrn_mdl_sysbasedir_lbcs }}{{ input_ensmem_subdir_00 }}/@y@j@H*{0{{ extrn_mdl_lbcs_offset_hrs }}..{{ ext_fcst_len_hrs }}..0{{ lbc_spec_intvl_hrs }}} \
           -mmin +5 | wc -l)</cyclestr> \
        -gt  $(( {{ fcst_len_hrs }}/{{ lbc_spec_intvl_hrs }} ))
      </sh>
    </dependency>
    
  </task>

{%- if do_ensemble %}
 </metatask>
{%- endif %}

{%- endif %}
<!--
************************************************************************
************************************************************************
-->
{%- if do_ensemble %}
  <metatask name="run_ensemble">

{%- if run_control %}
    <var name="{{ ensmem_indx_name }}">
{%- for m in range(2, num_ens_members+1) -%}
  {%- set fmtstr=" %0"~ndigits_ensmem_names~"d" -%}
  {{- fmtstr%m -}}
{%- endfor %} </var>
{%- else %}
    <var name="{{ ensmem_indx_name }}">
{%- for m in range(1, num_ens_members+1) -%}
  {%- set fmtstr=" %0"~ndigits_ensmem_names~"d" -%}
  {{- fmtstr%m -}}
{%- endfor %} </var>
{%- endif %}

{%- endif %}

  <task name="&GET_EXTRN_ICS_TN;{{ uscore_ensmem_name }}" cycledefs="forecast_00z,forecast_12z" maxtries="{{ maxtries_get_extrn_ics }}">

    &RSRV_HPSS;
  {% if run_realtime %}
    &WALL_LIMIT_PRE;
  {% endif %}
  {% if machine in ["WCOSS_CRAY"] %}
    <shared/>
  {% endif %}
    <command>&LOAD_MODULES_RUN_TASK_FP; "&GET_EXTRN_ICS_TN;" "&JOBSDIR;/JREGIONAL_GET_EXTRN_MDL_FILES"</command>
  {% if machine in ["WCOSS_DELL_P3"] %}
    <memory>2048M</memory><native>-R affinity[core]</native>
  {% endif %}
    <nodes>{{ nnodes_get_extrn_ics }}:ppn={{ ppn_get_extrn_ics }}</nodes>
    <walltime>{{ wtime_get_extrn_ics }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
    <jobname>rrfse_&GET_EXTRN_ICS_TN;{{ uscore_ensmem_name }}</jobname>
    <join><cyclestr>&LOGDIR;/&GET_EXTRN_ICS_TN;{{ uscore_ensmem_name }}_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>EXTRN_MDL_NAME</name><value>{{ extrn_mdl_name_ics }}</value></envar>
    <envar><name>ICS_OR_LBCS</name><value>ICS</value></envar>
    <envar><name>SLASH_ENSMEM_SUBDIR</name><value><cyclestr>{{ slash_ensmem_subdir }}</cyclestr></value></envar>
    <envar><name>INPUT_ENSMEM_SUBDIR</name><value><cyclestr>{{ input_ensmem_subdir }}</cyclestr></value></envar>
    <envar><name>POST_ENSMEM_SUBDIR</name><value><cyclestr>{{ post_ensmem_subdir }}</cyclestr></value></envar>
    <envar><name>ENSMEM_NAME</name><value><cyclestr>{{ ensmem_name }}</cyclestr></value></envar>

    <dependency>
<!--
      <datadep age="00:00:05:00"><cyclestr offset="-{{ extrn_mdl_ics_offset_hrs }}:00:00">{{ extrn_mdl_sysbasedir_ics }}{{ input_ensmem_subdir }}/@y@j@H00000{{ extrn_mdl_ics_offset_hrs }}</cyclestr></datadep>
-->
      <datadep age="00:00:05:00"><cyclestr offset="-{{ extrn_mdl_ics_offset_hrs }}:00:00">{{ extrn_mdl_sysbasedir_ics }}/@Y@m@d@H{{ post_ensmem_subdir }}/wrfnat{{ ensmem_name }}_00.grib2</cyclestr></datadep>
    </dependency>

  </task>
<!--
************************************************************************
************************************************************************
-->
  <task name="&GET_EXTRN_LBCS_TN;{{ uscore_ensmem_name }}" cycledefs="forecast_00z,forecast_12z" maxtries="{{ maxtries_get_extrn_lbcs }}">

    &RSRV_HPSS;
  {% if run_realtime %}
    &WALL_LIMIT_PRE;
  {% endif %}
  {% if machine in ["WCOSS_CRAY"] %}
    <shared/>
  {% endif %}
    <command>&LOAD_MODULES_RUN_TASK_FP; "&GET_EXTRN_LBCS_TN;" "&JOBSDIR;/JREGIONAL_GET_EXTRN_MDL_FILES"</command>
  {% if machine in ["WCOSS_DELL_P3"] %}
    <memory>2048M</memory><native>-R affinity[core]</native>
  {% endif %}
    <nodes>{{ nnodes_get_extrn_lbcs }}:ppn={{ ppn_get_extrn_lbcs }}</nodes>
    <walltime>{{ wtime_get_extrn_lbcs }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
    <jobname>rrfse_&GET_EXTRN_LBCS_TN;{{ uscore_ensmem_name }}</jobname>
    <join><cyclestr>&LOGDIR;/&GET_EXTRN_LBCS_TN;{{ uscore_ensmem_name }}_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>EXTRN_MDL_NAME</name><value>{{ extrn_mdl_name_lbcs }}</value></envar>
    <envar><name>ICS_OR_LBCS</name><value>LBCS</value></envar>
    <envar><name>SLASH_ENSMEM_SUBDIR</name><value><cyclestr>{{ slash_ensmem_subdir }}</cyclestr></value></envar>
    <envar><name>INPUT_ENSMEM_SUBDIR</name><value><cyclestr>{{ input_ensmem_subdir }}</cyclestr></value></envar>
    <envar><name>POST_ENSMEM_SUBDIR</name><value><cyclestr>{{ post_ensmem_subdir }}</cyclestr></value></envar>
    <envar><name>ENSMEM_NAME</name><value><cyclestr>{{ ensmem_name }}</cyclestr></value></envar>

    <dependency>
      <!-- Files through fhr 66 exist. -->
      <sh>
        test $(find <cyclestr offset="-{{ extrn_mdl_lbcs_offset_hrs }}:00:00">{{ extrn_mdl_sysbasedir_lbcs }}{{ input_ensmem_subdir }}/@y@j@H*{0{{ extrn_mdl_lbcs_offset_hrs }}..{{ ext_fcst_len_hrs }}..0{{ lbc_spec_intvl_hrs }}} \
           -mmin +5 | wc -l)</cyclestr> \
        -gt  $(( {{ fcst_len_hrs }}/{{ lbc_spec_intvl_hrs }} ))
      </sh>
    </dependency>
    
  </task>

{% if do_ensemble %}
 </metatask>
{% endif %}
<!--
************************************************************************
************************************************************************
-->
{%- if do_ensemble %}
<metatask name="run_ensemble">

<var name="{{ ensmem_indx_name }}">
{%- for m in range(1, num_ens_members+1) -%}
  {%- set fmtstr=" %0"~ndigits_ensmem_names~"d" -%}
  {{- fmtstr%m -}}
{%- endfor %} </var>
{%- endif %}

  <task name="&MAKE_ICS_TN;{{ uscore_ensmem_name }}" cycledefs="forecast_00z,forecast_12z" maxtries="{{ maxtries_make_ics }}">

    &RSRV_DEFAULT;
  {% if run_realtime %}
    &WALL_LIMIT_PRE;
  {% endif %}

    <command>&LOAD_MODULES_RUN_TASK_FP; "&MAKE_ICS_TN;" "&JOBSDIR;/JREGIONAL_MAKE_ICS"</command>
    <nodes>{{ nnodes_make_ics }}:ppn={{ ppn_make_ics }}</nodes>
    <walltime>{{ wtime_make_ics }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
    <jobname>rrfse_&MAKE_ICS_TN;{{ uscore_ensmem_name }}</jobname>
    <join><cyclestr>&LOGDIR;/&MAKE_ICS_TN;{{ uscore_ensmem_name }}_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>SLASH_ENSMEM_SUBDIR</name><value><cyclestr>{{ slash_ensmem_subdir }}</cyclestr></value></envar>

    <dependency>
      <and>
        <taskdep task="&GET_EXTRN_ICS_TN;{{ uscore_ensmem_name }}"/>
        <or>
<!--          <taskdep task="&MAKE_GRID_TN;"/> -->
          <datadep age="00:00:00:05">&LOGDIR;/&MAKE_GRID_TN;_task_complete.txt</datadep>
          <streq><left>&RUN_TASK_MAKE_GRID;</left><right>FALSE</right></streq>
        </or>
        <or>
<!--          <taskdep task="&MAKE_OROG_TN;"/> -->
          <datadep age="00:00:00:05">&LOGDIR;/&MAKE_OROG_TN;_task_complete.txt</datadep>
          <streq><left>&RUN_TASK_MAKE_OROG;</left><right>FALSE</right></streq>
        </or>
        <or>
<!--          <taskdep task="&MAKE_SFC_CLIMO_TN;"/> -->
          <datadep age="00:00:00:05">&LOGDIR;/&MAKE_SFC_CLIMO_TN;_task_complete.txt</datadep>
          <streq><left>&RUN_TASK_MAKE_SFC_CLIMO;</left><right>FALSE</right></streq>
        </or>
      </and>
    </dependency>

  </task>
<!--
************************************************************************
************************************************************************
-->
  <task name="&MAKE_LBCS_TN;{{ uscore_ensmem_name }}" cycledefs="forecast_00z,forecast_12z" maxtries="{{ maxtries_make_lbcs }}">

    &RSRV_DEFAULT;
  {% if run_realtime %}
    &WALL_LIMIT_PRE;
  {% endif %}

    <command>&LOAD_MODULES_RUN_TASK_FP; "&MAKE_LBCS_TN;" "&JOBSDIR;/JREGIONAL_MAKE_LBCS"</command>
    <nodes>{{ nnodes_make_lbcs }}:ppn={{ ppn_make_lbcs }}</nodes>
    <walltime>{{ wtime_make_lbcs }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
    <jobname>rrfse_&MAKE_LBCS_TN;{{ uscore_ensmem_name }}</jobname>
    <join><cyclestr>&LOGDIR;/&MAKE_LBCS_TN;{{ uscore_ensmem_name }}_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>SLASH_ENSMEM_SUBDIR</name><value><cyclestr>{{ slash_ensmem_subdir }}</cyclestr></value></envar>

    <dependency>
      <and>
        <taskdep task="&GET_EXTRN_LBCS_TN;{{ uscore_ensmem_name }}"/>
        <or>
<!--          <taskdep task="&MAKE_GRID_TN;"/> -->
          <datadep age="00:00:00:05">&LOGDIR;/&MAKE_GRID_TN;_task_complete.txt</datadep>
          <streq><left>&RUN_TASK_MAKE_GRID;</left><right>FALSE</right></streq>
        </or>
        <or>
<!--          <taskdep task="&MAKE_OROG_TN;"/> -->
          <datadep age="00:00:00:05">&LOGDIR;/&MAKE_OROG_TN;_task_complete.txt</datadep>
          <streq><left>&RUN_TASK_MAKE_OROG;</left><right>FALSE</right></streq>
        </or>
        <or>
<!--          <taskdep task="&MAKE_SFC_CLIMO_TN;"/> -->
          <datadep age="00:00:00:05">&LOGDIR;/&MAKE_SFC_CLIMO_TN;_task_complete.txt</datadep>
          <streq><left>&RUN_TASK_MAKE_SFC_CLIMO;</left><right>FALSE</right></streq>
        </or>
      </and>
    </dependency>

  </task>
<!--
************************************************************************
************************************************************************
-->
  <task name="&RUN_FCST_LONG_TN;{{ uscore_ensmem_name }}" cycledefs="forecast_00z" maxtries="{{ maxtries_run_fcst }}">

    &RSRV_FCST;
  {% if run_realtime %}
    &WALL_LIMIT_FCST_00Z;
  {% endif %}

    <command>&LOAD_MODULES_RUN_TASK_FP; "&RUN_FCST_TN;" "&JOBSDIR;/JREGIONAL_RUN_FCST"</command>
  {% if machine in ["JET", "HERA"]  %}
    <cores>{{ ncores_run_fcst }}</cores>
    <native>{{ native_run_fcst }}</native>
  {% else %}
    <nodes>{{ nnodes_run_fcst }}:ppn={{ ppn_run_fcst }}</nodes>
    <nodesize>&NCORES_PER_NODE;</nodesize>
  {% endif %}
    <walltime>{{ wtime_run_fcst }}</walltime>
    <jobname>rrfse_&RUN_FCST_TN;{{ uscore_ensmem_name }}</jobname>
    <join><cyclestr>&LOGDIR;/&RUN_FCST_TN;{{ uscore_ensmem_name }}_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>SLASH_ENSMEM_SUBDIR</name><value><cyclestr>{{ slash_ensmem_subdir }}</cyclestr></value></envar>
    <envar><name>ENSMEM_INDX</name><value><cyclestr>#{{ ensmem_indx_name }}#</cyclestr></value></envar>
  
    <dependency>
      <and>
        <taskdep task="&MAKE_ICS_TN;{{ uscore_ensmem_name }}"/>
        <taskdep task="&MAKE_LBCS_TN;{{ uscore_ensmem_name }}"/>
      </and>
    </dependency>

  </task>
<!--
************************************************************************
************************************************************************
-->
  <task name="&RUN_FCST_TN;{{ uscore_ensmem_name }}" cycledefs="forecast_12z" maxtries="{{ maxtries_run_fcst }}">

    &RSRV_FCST;
  {% if run_realtime %}
    &WALL_LIMIT_FCST_12Z;
  {% endif %}

    <command>&LOAD_MODULES_RUN_TASK_FP; "&RUN_FCST_TN;" "&JOBSDIR;/JREGIONAL_RUN_FCST"</command>
  {% if machine in ["JET", "HERA"]  %}
    <cores>{{ ncores_run_fcst }}</cores>
    <native>{{ native_run_fcst }}</native>
  {% else %}
    <nodes>{{ nnodes_run_fcst }}:ppn={{ ppn_run_fcst }}</nodes>
    <nodesize>&NCORES_PER_NODE;</nodesize>
  {% endif %}
    <walltime>{{ wtime_run_fcst }}</walltime>
    <jobname>rrfse_&RUN_FCST_TN;{{ uscore_ensmem_name }}</jobname>
    <join><cyclestr>&LOGDIR;/&RUN_FCST_TN;{{ uscore_ensmem_name }}_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>SLASH_ENSMEM_SUBDIR</name><value><cyclestr>{{ slash_ensmem_subdir }}</cyclestr></value></envar>
    <envar><name>ENSMEM_INDX</name><value><cyclestr>#{{ ensmem_indx_name }}#</cyclestr></value></envar>
  
    <dependency>
      <and>
    {%- if run_realtime %}
        <timedep><cyclestr offset="&START_FCST_12Z;">@Y@m@d@H@M00</cyclestr></timedep>
    {%- endif %}
        <taskdep task="&MAKE_ICS_TN;{{ uscore_ensmem_name }}"/>
        <taskdep task="&MAKE_LBCS_TN;{{ uscore_ensmem_name }}"/>
      </and>
    </dependency>

  </task>
<!--
************************************************************************
************************************************************************
-->
  <metatask name="&RUN_POST_TN;{{ uscore_ensmem_name }}">
    <var name="fhr"> {% for h in range(0, fcst_len_hrs+1) %}{{ " %03d" % h  }}{% endfor %} </var>
    <task name="&RUN_POST_TN;{{ uscore_ensmem_name }}_f#fhr#" cycledefs="forecast_00z,forecast_12z" maxtries="{{ maxtries_run_post }}">

      &RSRV_DEFAULT;
    {% if run_realtime %}
      &WALL_LIMIT_POST;
    {% endif %}
      <command>&LOAD_MODULES_RUN_TASK_FP; "&RUN_POST_TN;" "&JOBSDIR;/JREGIONAL_RUN_POST"</command>
      <nodes>{{ nnodes_run_post }}:ppn={{ ppn_run_post }}</nodes>
      <walltime>{{ wtime_run_post }}</walltime>
      <nodesize>&NCORES_PER_NODE;</nodesize>
      <jobname>rrfse_&RUN_POST_TN;{{ uscore_ensmem_name }}_f#fhr#</jobname>
      <join><cyclestr>&LOGDIR;/&RUN_POST_TN;{{ uscore_ensmem_name }}_f#fhr#_@Y@m@d@H.log</cyclestr></join>

      <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
      <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
      <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
      <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
      <envar><name>SLASH_ENSMEM_SUBDIR</name><value><cyclestr>{{ slash_ensmem_subdir }}</cyclestr></value></envar>
      <envar><name>cyc</name><value><cyclestr>@H</cyclestr></value></envar>
      <envar><name>fhr</name><value>#fhr#</value></envar>

      <dependency>
        <or>
          <taskdep task="&RUN_FCST_TN;{{ uscore_ensmem_name }}"/>
          <and>
            <datadep age="05:00"><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H{{ slash_ensmem_subdir }}/dynf#fhr#.nc</cyclestr></datadep>
            <datadep age="05:00"><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H{{ slash_ensmem_subdir }}/phyf#fhr#.nc</cyclestr></datadep>
          </and>
        </or>
      </dependency>

    </task>
  </metatask>

{%- if run_realtime %}
<!--
************************************************************************
************************************************************************
-->
  <task name="&CLEAN_TN;{{ uscore_ensmem_name }}" cycledefs="forecast_00z,forecast_12z" maxtries="{{ maxtries_run_post }}">

    &RSRV_DEFAULT;

    <command>&JOBSDIR;/../scripts/exregional_clean.ksh</command>
    <cores>1</cores>
    <walltime>00:15:00</walltime>
    <jobname>rrfse_&CLEAN_TN;{{ uscore_ensmem_name }}</jobname>
    <join><cyclestr>&LOGDIR;/&CLEAN_TN;{{ uscore_ensmem_name }}_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>LOGDIR</name><value>&LOGDIR;</value></envar>
    <envar><name>SLASH_ENSMEM_SUBDIR</name><value><cyclestr>{{ slash_ensmem_subdir }}</cyclestr></value></envar>

  </task>
{%- endif %}

{%- if do_ensemble %}
</metatask>
{%- endif %}

{%- if do_ensemble %}

{%- if run_gsi %}
<!--
************************************************************************
************************************************************************
-->
  <task name="&ANAL_GSI_INPUT_TN;" cycledefs="forecast_00z,forecast_12z" maxtries="{{ maxtries_anal_gsi }}">

     &RSRV_DEFAULT;
     &WALL_LIMIT_ANAL;  

     <command>&LOAD_MODULES_RUN_TASK_FP; "&RUN_ANAL_TN;" "&JOBSDIR;/JREGIONAL_RUN_ANAL"</command>
     <cores>240</cores>
     <native> --cpus-per-task 2 --exclusive </native>
     <walltime>00:30:00</walltime>
     <jobname>rrfse_&ANAL_GSI_INPUT_TN;</jobname>
     <join><cyclestr>&LOGDIR;/&ANAL_GSI_INPUT_TN;_@Y@m@d@H.log</cyclestr></join>
   
     <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
     <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
     <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
     <envar><name>ANAL_DATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
     <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
     <envar><name>FG_ROOT</name><value><cyclestr>&CYCLE_BASEDIR;</cyclestr></value></envar>
     <envar><name>BKTYPE</name><value><cyclestr>1</cyclestr></value></envar>
     <envar><name>NUM_ENS_MEMBERS</name><value><cyclestr>#{{ num_ens_members }}#</cyclestr></value></envar>

     <dependency>
       <and>
         <datadep age="05:00"><cyclestr>&OBSPATH;/@Y@m@d@H.rap.t@Hz.prepbufr.tm00</cyclestr></datadep>
         <sh>
            test $(find <cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H/mem?/INPUT/gfs_data.tile7.halo0.nc  -mmin +5 | wc -l)</cyclestr> \
            == {{ num_ens_members }}
         </sh>
       </and>
    </dependency>
 
  </task>
<!--
************************************************************************
************************************************************************
-->
<metatask name="anal_gsi"> 
<var name="fhr"> {% for h in range(3, 25, 3) %}{{ " %02d" % h  }}{% endfor %} </var>
   <task name="&ANAL_GSI_RESTART_TN;_f#fhr#" cycledefs="forecast_00z,forecast_12z" maxtries="{{ maxtries_anal_gsi }}">

     &RSRV_DEFAULT;
     &WALL_LIMIT_ANAL; 

     <command>&LOAD_MODULES_RUN_TASK_FP; "&RUN_ANAL_TN;" "&JOBSDIR;/JREGIONAL_RUN_ANAL"</command>
     <cores>240</cores>
     <native> --cpus-per-task 2 --exclusive </native>
     <walltime>00:40:00</walltime>
     <jobname>rrfse_&ANAL_GSI_RESTART_TN;_f#fhr#</jobname>
     <join><cyclestr>&LOGDIR;/&ANAL_GSI_RESTART_TN;_f#fhr#_@Y@m@d@H.log</cyclestr></join>
   
     <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
     <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
     <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
     <envar><name>ANAL_DATE</name><value><cyclestr offset="#fhr#:00:00">@Y@m@d@H</cyclestr></value></envar>
     <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
     <envar><name>FG_ROOT</name><value><cyclestr>&CYCLE_BASEDIR;</cyclestr></value></envar>
     <envar><name>BKTYPE</name><value><cyclestr>0</cyclestr></value></envar>
     <envar><name>NUM_ENS_MEMBERS</name><value><cyclestr>#{{ num_ens_members }}#</cyclestr></value></envar>

     <dependency>
       <and>
         <datadep age="05:00"><cyclestr offset="#fhr#:00:00">&OBSPATH;/@Y@m@d@H.rap.t@Hz.prepbufr.tm00</cyclestr></datadep>
         <sh>
            test $(find <cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H/mem?/RESTART/</cyclestr><cyclestr offset="#fhr#:00:00">@Y@m@d.@H0000.fv_core.res.tile1.nc  -mmin +5 | wc -l)</cyclestr> \
             == {{ num_ens_members }}
         </sh>
       </and>
    </dependency>
 
  </task>
 </metatask>

{%- endif %}

<!--
************************************************************************
************************************************************************
-->
<metatask name="plot_fcst">
<var name="fcstsec"> {% for h in range(0, fcst_len_hrs+1) %}{{ 3600 * h }} {% endfor %} </var>
<var name="fcsthour"> {% for h in range(0, fcst_len_hrs+1) %}{{ " %02d" % h  }}{% endfor %} </var>
    <task name="ncl_fcst_#fcsthour#" cycledefs="forecast_00z,forecast_12z" maxtries="{{ maxtries_run_post }}">

      &NCL_MAIN_RESOURCES;
      &RSRV_DEFAULT;

      <command>&NCL_SCRIPTS;/NCL/nclrrfsens.ksh</command>
      <cores>&NCL_MAIN_PROC;</cores>
      <jobname>rrfse_ncl_fcst_#fcsthour#</jobname>
      <envar><name>LOGDIR</name><value>&LOGDIR;</value></envar>
      <join><cyclestr>&LOGDIR;/ncl_@Y@m@d@H_#fcsthour#.log</cyclestr></join>

      <envar><name>START_TIME</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
      <envar><name>START_TIME_JUL_BASE</name><value><cyclestr>@Y@j@H</cyclestr></value></envar>
      <envar><name>FCST_TIME</name><value>#fcsthour#</value></envar>
      <envar><name>INFILEPATH</name><value><cyclestr>&COMOUT_BASEDIR;/{{ run_name }}.@Y@m@d/@H</cyclestr></value></envar>
      <envar><name>NATINFILEPATH</name><value><cyclestr>&COMOUT_BASEDIR;/{{ run_name }}.@Y@m@d/@H</cyclestr></value></envar>
      <envar><name>SFCINFILEPATH</name><value><cyclestr>&COMOUT_BASEDIR;/{{ run_name }}.@Y@m@d/@H</cyclestr></value></envar>
      <envar><name>WORKDIR_ROOT</name><value>&NCL_WORKDIR_ROOT;</value></envar>
      <envar><name>OUTPUT_ROOT</name><value><cyclestr>&COMOUT_BASEDIR;/{{ run_name }}.@Y@m@d/@H</cyclestr></value></envar>
      <envar><name>EXE_ROOT</name><value>&NCL_ROOT;</value></envar>
      <envar><name>MODEL</name><value>{{ model_name }}</value></envar> 

<!-- Files exist for all the members. -->
      <dependency>
       <sh>
         test $(find <cyclestr>&COMOUT_BASEDIR;/{{ run_name }}.@Y@m@d/@H/mem?/{{ net_name }}.t@Hz.bgdawpf0#fcsthour#.tm00.grib2  -mmin +5 | wc -l)</cyclestr> \
         == {{ num_ens_members }}
       </sh>
      </dependency>

    </task>
<!--
************************************************************************
************************************************************************
-->
    <task name="ncl_ens9_#fcsthour#" cycledefs="forecast_00z,forecast_12z" maxtries="{{ maxtries_run_post }}">

      &NCL_MAIN_RESOURCES;
      &RSRV_DEFAULT;

      <command>&NCL_SCRIPTS;/NCL/nclrrfsens9.ksh</command>
      <cores>&NCL_MAIN_PROC;</cores>
      <jobname>rrfse_ncl_ens9_#fcsthour#</jobname>
      <envar><name>LOGDIR</name><value>&LOGDIR;</value></envar>
      <join><cyclestr>&LOGDIR;/ncl_ens9_@Y@m@d@H_#fcsthour#.log</cyclestr></join>

      <envar><name>START_TIME</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
      <envar><name>START_TIME_JUL_BASE</name><value><cyclestr>@Y@j@H</cyclestr></value></envar>
      <envar><name>FCST_TIME</name><value>#fcsthour#</value></envar>
      <envar><name>INFILEPATH</name><value><cyclestr>&COMOUT_BASEDIR;/{{ run_name }}.@Y@m@d/@H</cyclestr></value></envar>
      <envar><name>NATINFILEPATH</name><value><cyclestr>&COMOUT_BASEDIR;/{{ run_name }}.@Y@m@d/@H</cyclestr></value></envar>
      <envar><name>SFCINFILEPATH</name><value><cyclestr>&COMOUT_BASEDIR;/{{ run_name }}.@Y@m@d/@H</cyclestr></value></envar>
      <envar><name>WORKDIR_ROOT</name><value>&NCL_WORKDIR_ROOT;</value></envar>
      <envar><name>OUTPUT_ROOT</name><value><cyclestr>&COMOUT_BASEDIR;/{{ run_name }}.@Y@m@d/@H</cyclestr></value></envar>
      <envar><name>EXE_ROOT</name><value>&NCL_ROOT;</value></envar>
      <envar><name>MODEL</name><value>{{ model_name }}</value></envar> 

<!-- Files exist for all the members. -->
      <dependency>
       <sh>
         test $(find <cyclestr>&COMOUT_BASEDIR;/{{ run_name }}.@Y@m@d/@H/mem?/{{ net_name }}.t@Hz.bgdawpf0#fcsthour#.tm00.grib2  -mmin +5 | wc -l)</cyclestr> \
         == {{ num_ens_members }}
       </sh>
      </dependency>

    </task>
<!--
************************************************************************
************************************************************************
-->
    <task name="py_max_#fcsthour#" cycledefs="forecast_00z,forecast_12z" maxtries="{{ maxtries_run_post }}">

      &NCL_MAIN_RESOURCES;
      &RSRV_DEFAULT;

      <command>&PYTHON_SCRIPTS;/py_max_plot.ksh</command>
      <cores>&NCL_PROC;</cores>
      <jobname>rrfse_py_max_#fcsthour#</jobname>
      <envar><name>LOGDIR</name><value>&LOGDIR;</value></envar>
      <join><cyclestr>&LOGDIR;/py_max_@Y@m@d@H_#fcsthour#.log</cyclestr></join>

      <envar><name>FCST_TIME</name><value>#fcsthour#</value></envar>
      <envar><name>START_TIME</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
      <envar><name>INFILEPATH</name><value><cyclestr>&COMOUT_BASEDIR;/{{ run_name }}.@Y@m@d/@H</cyclestr></value></envar>

<!-- Note depending on variable, the bgsfc or bgdawp files are used,
only checking for sfc here, and assuming that bgdawp are also available -->

<!-- Files exist for all the members. -->
      <dependency>
       <sh>
         test $(find <cyclestr>&COMOUT_BASEDIR;/{{ run_name }}.@Y@m@d/@H/mem?/{{ net_name }}.t@Hz.bgsfcf0#fcsthour#.tm00.grib2  -mmin +5 | wc -l)</cyclestr> \
         == {{ num_ens_members }}
       </sh>
      </dependency>

     </task>
  </metatask>
<!--
************************************************************************
************************************************************************
-->
<metatask name="zip_part1" mode="serial">
   <var name="fcsthour">00</var>
   <task name="ncl_zip_#fcsthour#" cycledefs="forecast_00z,forecast_12z" maxtries="{{ maxtries_run_post }}">

      &NCL_MAIN_RESOURCES;
      &RSRV_DEFAULT;

      <command>&NCL_SCRIPTS;/NCL/ncl_rrfs_zip.ksh</command>
      <cores>&NCL_PROC;</cores>
      <jobname><cyclestr>rrfse_ncl_zip_#fcsthour#</cyclestr></jobname>
      <join><cyclestr>&LOGDIR;/ncl_zip_@Y@m@d@H_#fcsthour#.log</cyclestr></join>

      <envar><name>FCST_TIME</name><value>#fcsthour#</value></envar>
      <envar><name>OUTPUT_ROOT</name><value><cyclestr>&COMOUT_BASEDIR;/{{ run_name }}.@Y@m@d/@H</cyclestr></value></envar>

      <dependency>
        <and>
         <taskdep task="ncl_fcst_#fcsthour#"/>
         <taskdep task="ncl_ens9_#fcsthour#"/>
        </and>
      </dependency>

    </task>
  </metatask>
<!--
************************************************************************
************************************************************************
-->
<metatask name="zip_part2" mode="serial">
   <var name="fcsthour"> {% for h in range(1, fcst_len_hrs+1) %}{{ " %02d" % h  }}{% endfor %} </var>
    <task name="ncl_zip_#fcsthour#" cycledefs="forecast_00z,forecast_12z" maxtries="{{ maxtries_run_post }}">

     &NCL_MAIN_RESOURCES;
     &RSRV_DEFAULT;

     <command>&NCL_SCRIPTS;/NCL/ncl_rrfs_zip.ksh</command>
     <cores>&NCL_PROC;</cores>
     <jobname><cyclestr>rrfse_ncl_zip_#fcsthour#</cyclestr></jobname>
     <join><cyclestr>&LOGDIR;/ncl_zip_@Y@m@d@H_#fcsthour#.log</cyclestr></join>

     <envar><name>FCST_TIME</name><value>#fcsthour#</value></envar>
     <envar><name>OUTPUT_ROOT</name><value><cyclestr>&COMOUT_BASEDIR;/{{ run_name }}.@Y@m@d/@H</cyclestr></value></envar>

     <dependency>
        <and>
         <metataskdep metatask="zip_part1"/>
         <taskdep task="ncl_fcst_#fcsthour#"/>
         <taskdep task="ncl_ens9_#fcsthour#"/>
        </and>
      </dependency>

     </task>
</metatask>
<!--
************************************************************************
************************************************************************
-->
 <task name="&ARCHIVE_TN;" cycledefs="archive" maxtries="{{ maxtries_run_post }}">

   &RSRV_HPSS;

    <command>&JOBSDIR;/../scripts/exregional_archive.ksh</command>
    <cores>1</cores>
    <walltime>08:00:00</walltime>
    <memory>24G</memory>
    <jobname>rrfse_&ARCHIVE_TN;</jobname>
    <join><cyclestr>&LOGDIR;/&ARCHIVE_TN;_@Y@m@d@H.log</cyclestr></join>
 
    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
 
  </task>

{%- endif %}

</workflow>

